---
title: "PTED Week 4 R Exercises"
format: html
---


```{r}
# Load packages
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
```

# Task 1: Write your own functions
```{r}
# Import dataset
wildboar <- read_csv("wildschwein_BE_2056.csv")

# Calculate euclidean distance
wildboar <- wildboar |> 
  group_by(TierName) |> 
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2))

# Create a function for euclidean distance calculation (that can handle vectors)
euclidean_distance_dataset <- function(x, y) {
  sqrt((x - lead(x))^2 + (y - lead(y))^2)
}

# Use Function to calculate the euclidean distance
wildboar <- wildboar |> 
  group_by(TierName) |> 
  mutate(distance = euclidean_distance_dataset(E, N))
```

# Task 2: Prepare Analysis
```{r}
# Filtering the wildboar dataset
start_date <- "2015-04-01"
end_date <- "2015-04-15"

wildboar_filtered <- wildboar |> 
  filter(TierName %in% c("Rosa", "Sabi"),
         DatetimeUTC >= as.POSIXct(start_date, tz = "UTC"),
         DatetimeUTC <= as.POSIXct(end_date, tz = "UTC"))
```

# Task 3: Create Join Key
```{r}
wildboar_filtered <- wildboar_filtered|> 
  mutate(DatetimeRound = round_date(DatetimeUTC, "15 mins"))
```

# Task 4: Measuring distance at concurrent locations
```{r}
# 1. Split data
split_data <- split(wildboar_filtered, wildboar_filtered$TierName)

# 2. Join by Datetime
joined_data <- inner_join(split_data[[1]], split_data[[2]], by = "DatetimeRound", suffix = c(".Rosa", ".Sabi"))

# 3. Calculate Euclidean distance
joined_data <- joined_data %>%
  mutate(distance = sqrt((E.Rosa - E.Sabi)^2 + (N.Rosa - N.Sabi)^2))

# 4. Determine meets
threshold_distance <- 100  # Threshold distance in meters

joined_data <- joined_data %>%
  mutate(meet = distance <= threshold_distance)
```

# Task 5: Visualize data
```{r}
# Individual dataframes for Rosa and Sabi
rosa_data <- split_data$Rosa
sabi_data <- split_data$Sabi

# Filtered dataset with meets
filtered_meets <- joined_data %>% filter(meet)

# Plotting
ggplot() +
  # Scatterplot of Rosa's locations
  geom_point(data = rosa_data, aes(x = E, y = N), color = "red", size = 1, alpha = 0.2) +
  # Scatterplot of Sabi's locations
  geom_point(data = sabi_data, aes(x = E, y = N), color = "blue", size = 1, alpha = 0.2) +
  # Highlight the meets with a frame
  geom_point(data = filtered_meets, aes(x = E.Rosa, y = N.Rosa), color = "black", size = 1, shape = 21, fill = NA, stroke = 1) +
  geom_point(data = filtered_meets, aes(x = E.Sabi, y = N.Sabi), color = "black", size = 1, shape = 21, fill = NA, stroke = 1) +
  # Set plot title and axis labels
  labs(title = "Spatial Meets of Rosa and Sabi",
       x = "Easting",
       y = "Northing") +
  # Adjust plot theme
  theme_minimal()
```

# Task 6: Visualize data as timecube with
```{r}
# Filtered dataset for the specified time range
filtered_data <- joined_data %>%
  filter(DatetimeRound >= as.POSIXct("2015-04-01") & DatetimeRound <= as.POSIXct("2015-04-04"))

# Create Space-Time Cube plot
cube_plot <- plot_ly(filtered_data, z = ~DatetimeRound, x = ~E.Rosa, y = ~N.Rosa,
                     type = "scatter3d", mode = "lines", name = "Rosa") %>%
  add_trace(z = ~DatetimeRound, x = ~E.Sabi, y = ~N.Sabi,
            type = "scatter3d", mode = "lines", name = "Sabi") %>%
  add_trace(data = filtered_data %>% filter(meet), 
              z = ~DatetimeRound, x = ~E.Sabi, y = ~N.Sabi,
              type = "scatter3d", mode = "markers", name = "Meets") %>%
  layout(scene = list(xaxis = list(title = "Time"), 
                      yaxis = list(title = "Easting"), 
                      zaxis = list(title = "Northing")),
         title = "Space-Time Cube Visualization")

# Display the Space-Time Cube plot
cube_plot
```

