---
title: "PTED Week 4 R Exercises"
format: html
---


```{r}
# Load packages
library(readr)
library(dplyr)
library(lubridate)
```

# Task 1: Write your own functions
```{r}
# Import dataset
wildboar <- read_csv("wildschwein_BE_2056.csv")

# Calculate euclidean distance
wildboar <- wildboar |> 
  group_by(TierName) |> 
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2))

# Create a function for euclidean distance calculation (that can handle vectors)
euclidean_distance_dataset <- function(x, y) {
  sqrt((x - lead(x))^2 + (y - lead(y))^2)
}

# Use Function to calculate the euclidean distance
wildboar <- wildboar |> 
  group_by(TierName) |> 
  mutate(distance = euclidean_distance_dataset(E, N))
```

# Task 2: Prepare Analysis
```{r}
# Filtering the wildboar dataset
start_date <- "2015-04-01"
end_date <- "2015-04-15"

wildboar_filtered <- wildboar |> 
  filter(TierName %in% c("Rosa", "Sabi"),
         DatetimeUTC >= as.POSIXct(start_date, tz = "UTC"),
         DatetimeUTC <= as.POSIXct(end_date, tz = "UTC"))
```

# Task 3: Create Join Key
```{r}
wildboar_filtered <- wildboar_filtered|> 
  mutate(DatetimeRound = round_date(DatetimeUTC, "15 mins"))
```

# Task 4: Measuring distance at concurrent locations
```{r}
# 1. Split data
split_data <- split(wildboar_filtered, wildboar_filtered$TierName)

# 2. Join by Datetime
joined_data <- inner_join(split_data[[1]], split_data[[2]], by = "DatetimeRound", suffix = c(".Rosa", ".Sabi"))

# 3. Calculate Euclidean distance
joined_data <- joined_data %>%
  mutate(distance = sqrt((E.Rosa - E.Sabi)^2 + (N.Rosa - N.Sabi)^2))

# 4. Determine meets
threshold_distance <- 100  # Threshold distance in meters

joined_data <- joined_data %>%
  mutate(meet = distance <= threshold_distance)
```

